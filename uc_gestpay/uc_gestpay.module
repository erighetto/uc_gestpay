<?php

/**
 * @file
 * Integrates Gestpay by Banca Sella (http://wwww.easynolo.it) redirected payment service.
 * Inspired by 2Checkout Module.
 */

/**
 * Implements hook_menu().
 */
function uc_gestpay_menu() {
	$items = array ();
	
	// Define an always accessible path to receive response from Gestpay. (server to server)
	// "URL Server to Server": http://www.example.com/uc_gestpay_capture
	$items ['uc_gestpay_capture'] = array (
			'page callback' => 'uc_gestpay_capture',
			'page arguments' => array (),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK 
	);
	
	// When Gestpay payment is finished, gestpay redirect user to this page
	// "URL per risposta positiva": http://www.example.com/uc_gestpay_continue
	$items ['uc_gestpay_continue'] = array (
			'page callback' => 'uc_gestpay_continue',
			'page arguments' => array (),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK 
	);
	
	// Error callback called by Gestpay
	// "URL per risposta negativa": http://www.example.com/uc_gestpay_error
	$items ['uc_gestpay_error'] = array (
			'page callback' => 'uc_gestpay_error',
			'page arguments' => array (),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK 
	);
	
	return $items;
}

/**
 * Implementation of hook_permission()
 */
function uc_gestpay_permission() {
	return array (
			'administer uc_gestpay settings' => array (
					'title' => t ( 'Gestpay (Banca Sella - easynolo.it) settings' ),
					'description' => t ( 'Gestpay (Banca Sella - easynolo.it) settings' ) 
			) 
	);
}

/**
 * Implementation of hook_ucga_display().
 */
function uc_gestpay_ucga_display() {
	// Tell UC Google Analytics to display the e-commerce JS on the custom
	// order completion page for this module.
	if (arg ( 0 ) == 'cart' && arg ( 1 ) == 'gestpay' && arg ( 2 ) == 'complete') {
		return TRUE;
	}
}

/**
 * Implementation of hook_form_alter().
 */
// Luca C.: TODO 
// da implementare hook_form_FORM_ID_alter() per uc_cart_checkout_review_form() => form_uc_cart_checkout_review_form_alter(&$form, &$form_state, $form_id)
function uc_gestpay_form_alter(&$form, &$form_state, $form_id) {
  
	if ($form_id == 'uc_cart_checkout_review_form' && intval($_SESSION ['cart_order'])> 0) {
	   $order_id = intval ( $_SESSION ['cart_order'] );
		$order = uc_order_load ( $order_id );

		if ($order->payment_method == 'gestpay') {
		
			unset($form['#submit']);
			$form['#submit'][] = 'uc_gestpay_redirect_form';
			$form['warning-redirect-to-bancasella'] = array(	
					'#type' => 'item',	
					'#title' => t('Warning'),	
					'#markup' => t('Sending the order you will be redirected to the system Banca Sella to make payment').'<br/>',
			);         
		}
	}
}

/**
 * Implementation of hook_payment_method().
 */
function uc_gestpay_uc_payment_method() {
	$path = base_path () . drupal_get_path ( 'module', 'uc_gestpay' );
	$title = variable_get ( 'uc_gestpay_method_title', t ( 'Credit card on a secure server:' ) );
	$title .= '<br /><img src="' . $path . '/gestpay_cc.gif" style="position: relative; left: 2.5em;">';
	
	$methods ['gestpay'] = array (
			'id' => 'gestpay',
			'name' => t ( 'Gestpay (Banca Sella - easynolo.it)' ),
			'title' => $title,
			'review' => variable_get ( 'uc_gestpay_check', FALSE ) ? t ( 'Credit card/eCheck' ) : t ( 'Credit card' ),
			'desc' => t ( 'Redirect to gestpay to pay by credit card or eCheck.' ),
			'callback' => 'uc_payment_method_gestpay',
			'weight' => 3,
			'checkout' => TRUE,
			'no_gateway' => TRUE 
	);
	
	return $methods;
}

/**
 * Adds gestpay settings to the payment method settings form.
 */
function uc_payment_method_gestpay($op, &$arg1) {
	switch ($op) {
		case 'cart-details' :
			$details = '';
			
			// Qua teoricamente dovrei decidere se inserire la carta di credito ora o se passare alla pagina di gestpay per il check 
			// Corretto??
			// Leggenda: CC => Credit Cart, CK => Online Check
			
			// la variabile "uc_gestpay_check" non è presente nel sistema ne viene mai assegnata nel modulo??!!
			if (variable_get ( 'uc_gestpay_check', FALSE )) {
				if ($_SESSION ['pay_method'] == 'CK') {
					$sel [2] = ' selected="selected"';
				} else {
					$sel [1] = ' selected="selected"';
				}
				unset ( $_SESSION ['pay_method'] );
				// non entrando nella condizione padre a questa funzione la variabile "$details" non viene inizializzata 
				// e va in errore quando si cerca di "farla" ritornare
				#$details = '<input name="pay_method" id="edit-pay-method" value="CC" />';
			}
			// ma se cerco di farla passare mi va in errore
			#$details = '<input name="pay_method" id="edit-pay-method" value="CC" />';
			
			return $details;
		
		case 'cart-process' :
			$order = uc_order_load ( $_SESSION ['cart_order'] );
			$_SESSION ['pay_method'] = $order->payment_method; // NOTE: valore variabile: "gestpay"
			return;
		
		case 'settings' :
			$form ['uc_gestpay_sid'] = array (
					'#type' => 'textfield',
					'#title' => t ( 'Vendor ID number' ),
					'#description' => t ( 'Your Gestpay vendor id.' ),
					'#default_value' => variable_get ( 'uc_gestpay_sid', '' ),
					'#size' => 16 
			);
			
			$form ['uc_gestpay_server'] = array (
					'#type' => 'radios',
					'#title' => t ( 'Gestpay server' ),
					'#options' => array (
							'sandbox' => t ( 'Sandbox - use for testing, requires a Free Gestpay/Easynolo demo account' ),
							'live' => t ( 'Live - use for processing real transactions' ) 
					),
					'#default_value' => variable_get ( 'uc_gestpay_server', 'sandbox' ),
					'#required' => TRUE 
			);
			$form ['uc_gestpay_language'] = array (
					'#type' => 'select',
					'#title' => t ( 'Language preference' ),
					'#description' => t ( 'Adjust language on gestpay pages.' ),
					'#options' => array (
							'1' => t ( 'Italian' ),
							'2' => t ( 'English' ),
							'3' => t ( 'Español' ),
							'4' => t ( 'Français' ),
							'5' => t ( 'Deutsch' ) 
					),
					'#default_value' => variable_get ( 'uc_gestpay_language', '1' ) 
			);
			
			$form ['uc_gestpay_currency'] = array (
					'#type' => 'select',
					'#title' => t ( 'Currency preference' ),
					'#description' => t ( 'Adjust currency used with gestpay.' ),
					'#options' => array (
							'1' => 'USD (US Dollar $)',
							'2' => 'GBP (Pound Sterling £)',
							'71' => 'JPY (Japanese Yen)',
							'71' => 'HKD (Hong Kong Dollar)',
							'242' => 'EUR (Euro €)' 
					// '234' => 'BRL Real',
										),
					'#default_value' => variable_get ( 'uc_gestpay_currency', '242' ) 
			);
			$form ['uc_gestpay_method_title'] = array (
					'#type' => 'textfield',
					'#title' => t ( 'Payment method title' ),
					'#default_value' => variable_get ( 'uc_gestpay_method_title', t ( 'Credit card on a secure server:' ) ) 
			);
			$form ['uc_gestpay_method_title_icons'] = array (
					'#type' => 'checkbox',
					'#title' => t ( 'Show credit card icons beside the payment method title.' ),
					'#default_value' => variable_get ( 'uc_gestpay_method_title_icons', TRUE ) 
			);
			$form ['uc_gestpay_checkout_button'] = array (
					'#type' => 'textfield',
					'#title' => t ( 'Order review submit button text' ),
					'#description' => t ( 'Provide gestpay specific text for the submit button on the order review page.' ),
					'#default_value' => variable_get ( 'uc_gestpay_checkout_button', t ( 'Submit Order' ) ) 
			);
			
			return $form;
	}
}

/**
 * 
 */
function uc_gestpay_redirect_form($form, &$form_state) {

   watchdog ( 'uc_gestpay', 'uc_gestpay_redirect_form', array(), $severity = WATCHDOG_NOTICE, $link = NULL );
	$order = $form_state['uc_order'];
	$payment_method = $order->payment_method;
	

	// Get server type from global settings ('sandbox' or 'live')
	$server = variable_get ( 'uc_gestpay_server', 'sandbox' );
	
	// Get Shop Login from settings
	$shopLogin = variable_get ( 'uc_gestpay_sid' );
	
	// Get uicCode from settings (242: Euro)
	$uicCode = variable_get ( 'uc_gestpay_currency', '' );
	
	// Extact order amount from order object:
	
	$amount = uc_currency_format ( $order->order_total, FALSE, FALSE, '.' );
	
	// Call Gestpay WSCryptDecrypt WebService using SOAP
	$client = new SoapClient ( uc_gestpay_wscryptdecrypt_url ( $server ) );
	
	// * * * Set Gestpay parameters * * *
	
	// Gestpay BASIC
	$params->shopLogin = $shopLogin;
	$params->uicCode = $uicCode;
	$params->amount = $amount;
	$params->shopTransactionId = $order->order_id;
	
	// TODO: Gestpay ADVANCED / PROFESSIONAL
	// * * * TEST: Get the values from form
	$params->cardNumber = '';
	$params->expiryMonth = '';
	$params->expiryYear = '';
	$params->buyerName = '';
	$params->buyerEmail = '';
	$params->languageId = '';
	$params->cvv = '';
	$params->customInfo = '';
	
   watchdog ( 'uc_gestpay', 'parametri configurati per l\'ordine: ' . $order->order_id.'. Processo di criptazione avviato', array(), $severity = WATCHDOG_NOTICE, $link = NULL );
   
	// Encrypt data
	$objectresult = $client->Encrypt ( $params );
	
	// Get encrypted data
	$simpleresult = $objectresult->EncryptResult;
	
	// Load XML result
	$xml = simplexml_load_string ( $simpleresult->any ); 
	
	if ($xml->TransactionResult == "OK") { // If OK

		// Generate Gestpay parameters
		$a = $shopLogin;
		$b = $xml->CryptDecryptString;
		
		// Log
		watchdog ( 'uc_gestpay', 'WSCryptDecrypt: Encrypt OK, order id: ' . $order->order_id );
		
		
		watchdog ( 'uc_gestpay', 'NOTICE - CHECKOUT AUTHORIZED order !gp_shoptransactionid_id. ' . $xml->TransactionResult . ' ' . $b, array (
				'!gp_shoptransactionid_id' => $order->order_id
		), WATCHDOG_NOTICE );
		
		
		// Create settings array
		$settings = array (
				'a' => $shopLogin,
				'b' => $xml->CryptDecryptString,
				'server' => $server 
		);
		
		$link = uc_gestpay_server_url ( $server ) . "?a=" . $a . "&b=" . $b;
		// Send data to Banca Sella
		header ( 'Location: ' . $link );
		
		// WARNING: Cannot use Drupal form because Gestpay only accepts A and B
		// parameters, while Drupal sends other extra parameters.
		
		// Return form with updated settings
		return uc_gestpay_order_form ( $form, $form_state, $order, $payment_method ['settings'] + $settings );
		
	} else { // If not OK (KO: transaction error; XX: suspended transaction (only with bank transfer))
	         
		
		// Log
		watchdog ( 'uc_gestpay', 'WSCryptDecrypt: Encrypt KO, order id: ' . $order->order_id . ' - Error: ' . $xml->ErrorDescription, null, WATCHDOG_ERROR );
		
		// Return error
		drupal_set_message( "Impossibile continuare a causa di un errore tecnico. Si prega di contattare l'assistenza/manutentori del sito web.", 'warning');
		return array ();
	}
}

/**
 * 
 */
function uc_gestpay_order_form($form, &$form_state, $order, $settings) {
	
	// Get Gestpay parameters from settings
	$a = $settings ['a'];
	$b = $settings ['a'];
	
	// Get server type from global settings ('sandbox' or 'live')
	$server = variable_get ( 'uc_gestpay_server', 'sandbox' );
	
	// Set Gestpay URL to use as form action
	$form ['#action'] = uc_gestpay_server_url ( $server );
	
	// Set 'get' method: Gestpay needs parameters from URL
	$form ['#method'] = 'get';
	
	// Set form values
	$form ['a'] = array (
			'#type' => 'hidden',
			'#value' => $a 
	);
	$form ['b'] = array (
			'#type' => 'hidden',
			'#value' => $b 
	);
	
	$form ['submit'] = array (
			'#type' => 'submit',
			'#value' => t ( 'Proceed to Gestpay' ) 
	);
	
	return $form;
}

/**
 * 
 */
function uc_gestpay_continue() {
	// Get server type from global settings ('sandbox' or 'live')
	$server = variable_get ( 'uc_gestpay_server', 'sandbox' );
	
	// Soap call
	$client = new SoapClient ( uc_gestpay_wscryptdecrypt_url ( $server ) );
	
	// Get parameters
	$params->shopLogin = $_GET ["a"];
	$params->CryptedString = $_GET ["b"];
	
	// Decrypt parameters
	$objectresult = $client->Decrypt ( $params );
	$simpleresult = $objectresult->DecryptResult;
	
	// Load XML result
	$xml = simplexml_load_string ( $simpleresult->any );
	
	// Load data from XML
	$xml_result = ( string ) $xml->TransactionResult;
	$xml_order_id = ( string ) $xml->ShopTransactionID; 
	
	$xml_amount = ( string ) $xml->Amount;
	
	$xml_currency = ( string ) $xml->Currency;
	$xml_authorizationcode = ( string ) $xml->AuthorizationCode;
	
	// sarebbe da formattare il valore dell'ammontare della transazione se no nei log appare errato
	watchdog ( 'uc_gestpay', 'NOTICE - PAYMENT OK, response: !gp_transactionresult, order #!gp_shoptransactionid, amount !amount', array (
			'!gp_transactionresult' => $xml_result,
			'!gp_shoptransactionid' => $xml_order_id,
			'!amount' => $xml_amount 
	), WATCHDOG_NOTICE );
	

	$comment = t ( 'Payment approved by Gestpay, order #!gp_shoptransactionid, auth. code !gp_authorizationcode', array (
	#		'!gp_shoptransactionid' => $$xml_order_id,
			'!gp_shoptransactionid' => $xml_order_id,
			'!gp_authorizationcode' => $xml_authorizationcode 
	) );
	
	// dobbiamo formattare in modo corretto il valore dell'ammontare se no si sbaglia poi l'inserimento nel commerce dell'ammontare corretto.
	uc_payment_enter ( $xml_order_id, 'gestpay', $xml_amount, 0, NULL, $comment );
	
	// reindirizzo l'utente allo step finale del checkout
	drupal_goto('cart/checkout/complete');
}

/**
 * 
 */
function uc_gestpay_error() {
	// Get server type from global settings ('sandbox' or 'live')
	$server = variable_get ( 'uc_gestpay_server', 'sandbox' );
	
	// Soap call
	$client = new SoapClient ( uc_gestpay_wscryptdecrypt_url ( $server ) );
	
	$params->shopLogin = $_GET ["a"];
	$params->CryptedString = $_GET ["b"];
	
	// Log
	// watchdog('uc_gestpay', 'CAPTURE A webresult:' . $_GET["a"]);
	// watchdog('uc_gestpay', 'CAPTURE B webresult:' . $_GET["b"]);
	
	$objectresult = $client->Decrypt ( $params );
	$simpleresult = $objectresult->DecryptResult;
	
	$xml = simplexml_load_string ( $simpleresult->any );
	
	// Log
	watchdog('uc_gestpay', 'GestPay Error: ' . $xml->TransactionResult . 
			" - ShopTransactionID: " . $xml->ShopTransactionID . 
			" - BankTransactionID: " . $xml->BankTransactionID . 
			" - AuthorizationCode: " . $xml->AuthorizationCode . 
			" - Currency: " . $xml->Currency . 
			" - Amount: " . $xml->Amount . 
			" - BuyerName: " . $xml->BuyerName . 
			" - BuyerEmail: " . $xml->BuyerEmail, array(), WATCHDOG_ERROR);
	
	// Load commerce order
	$order = uc_order_load ( ( int ) $xml->ShopTransactionID );
	
	// Set error message
	drupal_set_message ( t ( 'Warning: an error has occured during the payment process.' ), 'warning' );
	
	// reindirizzo utente al panello di revisione dell'ordine o all'inzio del checkout
	//drupal_goto ( 'cart' );
	drupal_goto ( '<front>' );
}

/**
 * 
 */
function uc_gestpay_capture() {
	// Get server type from global settings ('sandbox' or 'live')
	$server = variable_get ( 'uc_gestpay_server', 'sandbox' );
	
	// Soap call
	$client = new SoapClient ( uc_gestpay_wscryptdecrypt_url ( $server ) );
	
	$params->shopLogin = $_GET ["a"];
	$params->CryptedString = $_GET ["b"];
	
	$objectresult = $client->Decrypt ( $params );
	$simpleresult = $objectresult->DecryptResult;
	
	$xml = simplexml_load_string ( $simpleresult->any );
	
	// Aggiungere un controllo nel caso in cui il ritorno non sia accettato o corretto
	#if($xml->TransactionResult == 'OK'){ ... }else{ ...}
	
	// Log
	watchdog ( 'uc_gestpay', 'CAPTURE RESULT server2server:' . $xml->TransactionResult );
	
	return '<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /></head><body>OK</body></html>';
}

/**
 * 
 */
function uc_gestpay_finalize() {
	if (! $_SESSION ['do_complete']) {
		drupal_goto ( 'cart' );
	}
	$order = uc_order_load ( arg ( 3 ) );
	// Add a comment to let sales team know this came in through the site.
	uc_order_comment_save ( $order->order_id, 0, t ( 'Order created through website.' ), 'admin' );
	$output = uc_cart_complete_sale ( $order, variable_get ( 'uc_new_customer_login', FALSE ) );
	
	$page = variable_get ( 'uc_cart_checkout_complete_page', '' );
	if (! empty ( $page )) {
		drupal_goto ( $page );
	}
	// $output = uc_order_status_data($order->order_status, 'state');
	return $output;
}

/**
 * Returns the URL with the WSCryptDecrypt WebService
 */
function uc_gestpay_wscryptdecrypt_url($server) {
	switch ($server) {
		case 'sandbox' :
			return 'https://testecomm.sella.it/gestpay/gestpayws/WSCryptDecrypt.asmx?WSDL';
		case 'live' :
			return 'https://ecomms2s.sella.it/gestpay/gestpayws/WSCryptDecrypt.asmx?WSDL';
	}
}

/**
 * Returns the URL to the specified Gestpay server.
 *
 * @param $server Either
 *        	sandbox or live indicating which server to get the URL for.
 *        	
 * @return The URL to use to submit requests to the Gestpay server.
 */
function uc_gestpay_server_url($server) {
	switch ($server) {
		case 'sandbox' :
			return 'https://testecomm.sella.it/pagam/pagam.aspx';
		case 'live' :
			return 'https://ecomm.sella.it/pagam/pagam.aspx';
	}
}

/**
 * Returns an array of all possible currency codes.
 */
function uc_gestpay_currencies() {
	return array (
			'242' => t ( 'Euro' ),
			'1' => t ( 'US dollar' ),
			'2' => t ( 'GB pound' ),
			'3' => t ( 'Swiss franc' ),
			'7' => t ( 'Danish krone' ),
			'8' => t ( 'Norwegian krone' ),
			'9' => t ( 'Swedish krona' ),
			'12' => t ( 'Canadian dollar' ),
			// '18' => t('Italian lira'), // not supported by Drupal Commerce
			'71' => t ( 'Japanese yen' ),
			'103' => t ( 'Hong Kong dollar' ),
			'234' => t ( 'Brazilian real' ) 
	);
}

/**
 * 
 */
function _uc_gestpay_get_currency($gp_currency) {
	$dc_gp_currencies = array (
			'242' => 'EUR',
			'1' => 'USD',
			'2' => 'GBP',
			'3' => 'CHF',
			'7' => 'DKK',
			'8' => 'NOK',
			'9' => 'SEK',
			'12' => 'CAD',
			'71' => 'JPY',
			'103' => 'HKD',
			'234' => 'BRL' 
	);
	if (array_key_exists ( $gp_currency, $dc_gp_currencies )) {
		return $dc_gp_currencies [$gp_currency];
	} else {
		return FALSE;
	}
}